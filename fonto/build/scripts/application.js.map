{"version":3,"sources":["application.js","fonts/fonts.controller.js","fonts/fonts.directive.js","fonts/fonts.service.js","sidenav/sidenav.directive.js","toolbar/toolbar.controller.js","toolbar/toolbar.directive.js"],"names":[],"mappings":"AACA,GAAA,SAAA,QAAA,WACA,KAAA,QAAA,mBACA,KAAA,QAAA,gBACA,KAAA,QAAA,oBACA,GAAA,QAAA,oBAEA,IAAA,QAAA,OAAA,YAAA,eACA,QAAA,qBAAA,SAAA,GACA,EAAA,MAAA,WACA,eAAA,QACA,UAAA,SAEA,cAAA,UCbA,SAAA,OAAA,YACA,WAAA,mBAAA,cAAA,SAAA,GACA,GAAA,GAAA,IAEA,GAAA,KAAA,EAGA,IAAA,GAAA,EAAA,kBAEA,GAAA,QAAA,SAAA,EAAA,GACA,EAAA,MAAA,OCVA,QAAA,OAAA,YACA,UAAA,aAAA,WACA,OACA,SAAA,IACA,YAAA,6BCJA,QAAA,OAAA,YACA,QAAA,eAAA,OAAA,QAAA,SAAA,EAAA,GACA,OACA,YAAA,SAAA,EAAA,GACA,MAAA,UAAA,GAKA,GAJA,EAAA,IAAA,+FAAA,QAAA,SAAA,GACA,EAAA,KADA,SAQA,iBAAA,WACA,GAAA,GAAA,QAAA,QACA,EAAA,QAAA,gBAEA,EAAA,GAAA,IACA,QAAA,QACA,WAAA,QAGA,OAAA,IAAA,IACA,SAAA,EAAA,WAAA,qBACA,UAAA,KAIA,oBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,kBAEA,GAAA,SACA,OAAA,GACA,SAAA,EAAA,GACA,EACA,EAAA,GAEA,EAAA,MAKA,mBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,kBAEA,GAAA,OAAA,EAAA,SAAA,EAAA,GACA,EACA,EAAA,GAEA,EAAA,MAKA,UAAA,SAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,kBAEA,GAAA,YAAA,EAAA,SAAA,GAGA,IAAA,GAFA,GAAA,EAAA,MAEA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAEA,GAAA,IACA,OAAA,EAAA,GAAA,OACA,SAAA,EAAA,GAAA,SACA,MAAA,EAAA,GAAA,MACA,aAAA,EAAA,GAAA,aACA,QAAA,EAAA,GAAA,QACA,QACA,MAAA,EAAA,GAAA,SAAA,OACA,OAAA,EAAA,GAAA,UAEA,SAAA,EACA,YAAA,GAGA,GAAA,QACA,OAAA,EAAA,GAAA,QACA,GACA,QAAA,GACA,kBAOA,iBAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,QAAA,QACA,EAAA,QAAA,MAEA,EAAA,EAAA,kBAAA,EACA,GAAA,IAAA,EAAA,SAAA,GACA,EAAA,KAAA,GACA,EAAA,GAAA,SAAA,WACA,EAAA,MAAA,OAEA,GAAA,QAAA,WACA,EAAA,OAAA,UCrGA,QAAA,OAAA,YACA,UAAA,eAAA,WACA,OACA,SAAA,IACA,YAAA,iCCJA,QAAA,OAAA,YACA,WAAA,eAAA,SAAA,aAAA,SAAA,EAAA,GACA,EAAA,cAAA,WACA,EAAA,WAAA,UAEA,EAAA,SAAA,SAAA,EAAA,GACA,EAAA,OCNA,QAAA,OAAA,YACA,UAAA,eAAA,WACA,OACA,SAAA,IACA,YAAA","file":"application.js","sourcesContent":["// Required Angular and Angular Material scripts\nvar angular = require('angular'),\n  ngan = require('angular-animate'),\n  ngar = require('angular-aria'),\n  ngme = require('angular-messages'),\n  md = require('angular-material');\n\nvar app = angular.module('FontoApp', ['ngMaterial'])\n  .config(function($mdThemingProvider) {\n    $mdThemingProvider.theme('default')\n      .primaryPalette('blue', {\n        'default': 'A200'\n      })\n      .accentPalette('pink');\n  });\n","angular.module('FontoApp')\n  .controller('FontoController', function(FontListSvc) {\n    var vm = this;\n\n    vm.size = 32;\n\n    // FontListSvc.syncFonts('google');\n    var db = FontListSvc.loadFontDatabase();\n\n    db.find({}, function (error, fonts) {\n      vm.fonts = fonts;\n    });\n\n    // FontListSvc.loadFontAPI('google', function(data) {\n    //   fonts.families = data;\n    // });\n    //\n    // FontListSvc.saveFontToDatabase('family', function(data) {\n    //\n    // });\n  });\n","angular.module('FontoApp')\n  .directive('fontoFonts', function() {\n    return {\n      restrict: 'E',\n      templateUrl: 'source/fonts/fonts.html'\n    }\n  });\n","angular.module('FontoApp')\n  .factory('FontListSvc', ['$log', '$http', function ($log, $http) {\n    return {\n      loadFontAPI: function (service, callback) {\n        if (service == 'google') {\n          $http.get('https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyDGavjqjIkNU4CV9DHosp0xXV8pJyEQLXk').success(function(data) {\n            callback(data);\n          });\n        } else {\n          return false;\n        }\n      },\n\n      loadFontDatabase: function () {\n        var Datastore = require('nedb'),\n          AppDirectory = require('appdirectory');\n\n        var app = new AppDirectory({\n          appName: 'Fonto',\n          appVersion: 'v010'\n        });\n\n        return new Datastore({\n          filename: app.userData() + '/database/Fonts.db',\n          autoload: true\n        });\n      },\n\n      getFontFromDatabase: function (family, callback) {\n        var self = this,\n          database = self.loadFontDatabase();\n\n        database.findOne({\n          family: family\n        }, function (error, matches) {\n          if (error) {\n            callback(error);\n          } else {\n            callback(matches);\n          }\n        });\n      },\n\n      saveFontToDatabase: function (family, callback) {\n        var self = this,\n          database = self.loadFontDatabase();\n\n        database.insert(family, function (error, record) {\n          if (error) {\n            callback(error);\n          } else {\n            callback(record);\n          }\n        });\n      },\n\n      syncFonts: function (service) {\n        var self = this;\n        var db = self.loadFontDatabase();\n\n        self.loadFontAPI(service, function (data) {\n          var fonts = data.items;\n\n          for (var i = 0; i < fonts.length; i++) {\n            // Set the new database structure\n            var family = {\n              family: fonts[i].family,\n              category: fonts[i].category,\n              files: fonts[i].files,\n              lastModified: fonts[i].lastModified,\n              subsets: fonts[i].subsets,\n              styles: {\n                count: fonts[i].variants.length,\n                styles: fonts[i].variants\n              },\n              enabled: false,\n              defaultSize: 32\n            };\n\n            db.update({\n              family: fonts[i].family\n            }, family, {\n              upsert: true\n            }, function (error, replaced) {\n\n            });\n          }\n        });\n      },\n\n      downloadFontFile: function (url, destination, callback) {\n        var http = require('http'),\n          fs = require('fs');\n\n        var file = fs.createWriteStream(destination);\n        http.get(url, function(response) {\n          response.pipe(file);\n          file.on('finish', function() {\n            file.close(callback);\n          });\n        }).on('error', function(error) {\n          fs.unlink(destination);\n        });\n      }\n    }\n  }]);\n","angular.module('FontoApp')\n  .directive('fontoSidenav', function() {\n    return {\n      restrict: 'E',\n      templateUrl: 'source/sidenav/sidenav.html'\n    }\n  });\n","angular.module('FontoApp')\n  .controller('ToolbarCtrl', function($scope, $mdSidenav) {\n    $scope.toggleSidenav = function() {\n      $mdSidenav('sidenav').toggle();\n    };\n    $scope.openMenu = function($mdOpenMenu, event) {\n      $mdOpenMenu(event);\n    };\n  });\n","angular.module('FontoApp')\n  .directive('fontoToolbar', function() {\n    return {\n      restrict: 'E',\n      templateUrl: 'source/toolbar/toolbar.html'\n    }\n  });\n"],"sourceRoot":"/source/"}